
OpenLaserSafety.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000070  08004aa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08004aa8  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011524  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002479  00000000  00000000  000315c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00033a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002843e  00000000  00000000  00035198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3c9  00000000  00000000  0005d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9230  00000000  00000000  0006c99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165bcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003578  00000000  00000000  00165c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080049a8 	.word	0x080049a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080049a8 	.word	0x080049a8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char MSG[35] = {'\0'};
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	221f      	movs	r2, #31
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fda6 	bl	800413c <memset>
  char str[15] = {'\0'};
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	f8c3 2007 	str.w	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fbe8 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f843 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f963 	bl	80008d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060e:	f000 f903 	bl	8000818 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000612:	f000 f931 	bl	8000878 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000616:	f000 f8ad 	bl	8000774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  __IO uint16_t ADCValue=0;
 800061a:	2300      	movs	r3, #0
 800061c:	807b      	strh	r3, [r7, #2]

  HAL_ADC_Start(&hadc1);
 800061e:	4818      	ldr	r0, [pc, #96]	; (8000680 <main+0xa8>)
 8000620:	f000 fc9e 	bl	8000f60 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(MSG, "Hello!\r\n");
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4916      	ldr	r1, [pc, #88]	; (8000684 <main+0xac>)
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fd8e 	bl	800414c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)MSG, sizeof(MSG), 100);
 8000630:	f107 0114 	add.w	r1, r7, #20
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	2223      	movs	r2, #35	; 0x23
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <main+0xb0>)
 800063a:	f002 fdc1 	bl	80031c0 <HAL_UART_Transmit>
      if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 800063e:	210a      	movs	r1, #10
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <main+0xa8>)
 8000642:	f000 fd5b 	bl	80010fc <HAL_ADC_PollForConversion>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d10d      	bne.n	8000668 <main+0x90>
              ADCValue = HAL_ADC_GetValue(&hadc1);
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0xa8>)
 800064e:	f000 fde0 	bl	8001212 <HAL_ADC_GetValue>
 8000652:	4603      	mov	r3, r0
 8000654:	b29b      	uxth	r3, r3
 8000656:	807b      	strh	r3, [r7, #2]
              sprintf(str, "Reading: %d\r\n", ADCValue);
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	b29b      	uxth	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	490a      	ldr	r1, [pc, #40]	; (800068c <main+0xb4>)
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fd72 	bl	800414c <siprintf>
      }
      HAL_UART_Transmit(&huart3, (uint8_t*)str, sizeof(str), 100);
 8000668:	1d39      	adds	r1, r7, #4
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	220f      	movs	r2, #15
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <main+0xb0>)
 8000670:	f002 fda6 	bl	80031c0 <HAL_UART_Transmit>

      HAL_Delay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 fc0a 	bl	8000e90 <HAL_Delay>
	  sprintf(MSG, "Hello!\r\n");
 800067c:	e7d2      	b.n	8000624 <main+0x4c>
 800067e:	bf00      	nop
 8000680:	20000520 	.word	0x20000520
 8000684:	080049c0 	.word	0x080049c0
 8000688:	20000098 	.word	0x20000098
 800068c:	080049cc 	.word	0x080049cc

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	; 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fd4c 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b4:	f001 fbfe 	bl	8001eb4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	; (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	4b27      	ldr	r3, [pc, #156]	; (8000770 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a25      	ldr	r2, [pc, #148]	; (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fc2b 	bl	8001f74 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f978 	bl	8000a18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f001 fbd4 	bl	8001ed4 <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 f971 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2103      	movs	r1, #3
 8000752:	4618      	mov	r0, r3
 8000754:	f001 febc 	bl	80024d0 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800075e:	f000 f95b 	bl	8000a18 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0x98>)
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <MX_ADC1_Init+0x9c>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0x98>)
 800078e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000792:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_ADC1_Init+0x98>)
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_ADC1_Init+0xa0>)
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_ADC1_Init+0x98>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_ADC1_Init+0x98>)
 80007d6:	f000 fb7f 	bl	8000ed8 <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 f91a 	bl	8000a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007e4:	2309      	movs	r3, #9
 80007e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_ADC1_Init+0x98>)
 80007f6:	f000 fd19 	bl	800122c <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 f90a 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000520 	.word	0x20000520
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART3_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART3_UART_Init+0x58>)
 800085c:	f002 fc62 	bl	8003124 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f8d7 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000098 	.word	0x20000098
 8000874:	40004800 	.word	0x40004800

08000878 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000882:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2206      	movs	r2, #6
 8000888:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2202      	movs	r2, #2
 800088e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2201      	movs	r2, #1
 80008a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	f001 f9b1 	bl	8001c22 <HAL_PCD_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f8a7 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000011c 	.word	0x2000011c

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a46      	ldr	r2, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a40      	ldr	r2, [pc, #256]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a3a      	ldr	r2, [pc, #232]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a34      	ldr	r2, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a2e      	ldr	r2, [pc, #184]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <MX_GPIO_Init+0x138>)
 8000982:	f001 f935 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	4821      	ldr	r0, [pc, #132]	; (8000a10 <MX_GPIO_Init+0x13c>)
 800098c:	f001 f930 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481b      	ldr	r0, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x140>)
 80009a8:	f000 ff76 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_GPIO_Init+0x138>)
 80009c6:	f000 ff67 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x13c>)
 80009e2:	f000 ff59 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0x13c>)
 80009fa:	f000 ff4d 	bl	8001898 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40020800 	.word	0x40020800

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <HAL_ADC_MspInit+0x74>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d123      	bne.n	8000ad6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_ADC_MspInit+0x78>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_ADC_MspInit+0x78>)
 8000a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_ADC_MspInit+0x78>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_ADC_MspInit+0x78>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_ADC_MspInit+0x78>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_ADC_MspInit+0x78>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_ADC_MspInit+0x7c>)
 8000ad2:	f000 fee1 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40012000 	.word	0x40012000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0ae      	sub	sp, #184	; 0xb8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2290      	movs	r2, #144	; 0x90
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 fb15 	bl	800413c <memset>
  if(huart->Instance==USART3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <HAL_UART_MspInit+0xb4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d13c      	bne.n	8000b96 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fed2 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b36:	f7ff ff6f 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0xbc>)
 8000b92:	f000 fe81 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	37b8      	adds	r7, #184	; 0xb8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004800 	.word	0x40004800
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0ae      	sub	sp, #184	; 0xb8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2290      	movs	r2, #144	; 0x90
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fab5 	bl	800413c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bda:	d159      	bne.n	8000c90 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000be0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fe71 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bf8:	f7ff ff0e 	bl	8000a18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c2e:	230a      	movs	r3, #10
 8000c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <HAL_PCD_MspInit+0xf0>)
 8000c3c:	f000 fe2c 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <HAL_PCD_MspInit+0xf0>)
 8000c5c:	f000 fe1c 	bl	8001898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6a:	6353      	str	r3, [r2, #52]	; 0x34
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c82:	6453      	str	r3, [r2, #68]	; 0x44
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <HAL_PCD_MspInit+0xec>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	37b8      	adds	r7, #184	; 0xb8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8b0 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f003 f9e0 	bl	80040e8 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20080000 	.word	0x20080000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	2000008c 	.word	0x2000008c
 8000d5c:	20000580 	.word	0x20000580

08000d60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8a:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f003 f99f 	bl	80040f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fc0f 	bl	80005d8 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dc8:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8000dcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd0:	2000057c 	.word	0x2000057c

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>

08000dd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f000 fd28 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f805 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de6:	f7ff fe1d 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fd35 	bl	800187e <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f000 fd0b 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000568 	.word	0x20000568

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000568 	.word	0x20000568

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e031      	b.n	8000f52 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fdb8 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_ADC_Init+0x84>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	f043 0202 	orr.w	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fad6 	bl	80014d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f023 0303 	bic.w	r3, r3, #3
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	641a      	str	r2, [r3, #64]	; 0x40
 8000f42:	e001      	b.n	8000f48 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	ffffeefd 	.word	0xffffeefd

08000f60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Start+0x1a>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e0ad      	b.n	80010d6 <HAL_ADC_Start+0x176>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d018      	beq.n	8000fc2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_ADC_Start+0x184>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <HAL_ADC_Start+0x188>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9a      	lsrs	r2, r3, #18
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d175      	bne.n	80010bc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd4:	4b45      	ldr	r3, [pc, #276]	; (80010ec <HAL_ADC_Start+0x18c>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100a:	d106      	bne.n	800101a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f023 0206 	bic.w	r2, r3, #6
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	645a      	str	r2, [r3, #68]	; 0x44
 8001018:	e002      	b.n	8001020 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001030:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_ADC_Start+0x190>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10f      	bne.n	800105e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d143      	bne.n	80010d4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	e03a      	b.n	80010d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <HAL_ADC_Start+0x194>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d10e      	bne.n	8001086 <HAL_ADC_Start+0x126>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001084:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_ADC_Start+0x190>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d120      	bne.n	80010d4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_ADC_Start+0x198>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d11b      	bne.n	80010d4 <HAL_ADC_Start+0x174>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	e00b      	b.n	80010d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f043 0210 	orr.w	r2, r3, #16
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	fffff8fe 	.word	0xfffff8fe
 80010f0:	40012300 	.word	0x40012300
 80010f4:	40012000 	.word	0x40012000
 80010f8:	40012200 	.word	0x40012200

080010fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001118:	d113      	bne.n	8001142 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d10b      	bne.n	8001142 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f043 0220 	orr.w	r2, r3, #32
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e063      	b.n	800120a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001142:	f7ff fe99 	bl	8000e78 <HAL_GetTick>
 8001146:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001148:	e021      	b.n	800118e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001150:	d01d      	beq.n	800118e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <HAL_ADC_PollForConversion+0x6c>
 8001158:	f7ff fe8e 	bl	8000e78 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d212      	bcs.n	800118e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b02      	cmp	r3, #2
 8001174:	d00b      	beq.n	800118e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f043 0204 	orr.w	r2, r3, #4
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e03d      	b.n	800120a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b02      	cmp	r3, #2
 800119a:	d1d6      	bne.n	800114a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0212 	mvn.w	r2, #18
 80011a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d123      	bne.n	8001208 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d11f      	bne.n	8001208 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d111      	bne.n	8001208 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d105      	bne.n	8001208 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1c>
 8001244:	2302      	movs	r3, #2
 8001246:	e136      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x28a>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b09      	cmp	r3, #9
 8001256:	d93a      	bls.n	80012ce <HAL_ADC_ConfigChannel+0xa2>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001260:	d035      	beq.n	80012ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68d9      	ldr	r1, [r3, #12]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	3b1e      	subs	r3, #30
 8001278:	2207      	movs	r2, #7
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a8d      	ldr	r2, [pc, #564]	; (80014c4 <HAL_ADC_ConfigChannel+0x298>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10a      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68d9      	ldr	r1, [r3, #12]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	061a      	lsls	r2, r3, #24
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012a6:	e035      	b.n	8001314 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68d9      	ldr	r1, [r3, #12]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4403      	add	r3, r0
 80012c0:	3b1e      	subs	r3, #30
 80012c2:	409a      	lsls	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012cc:	e022      	b.n	8001314 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6919      	ldr	r1, [r3, #16]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	2207      	movs	r2, #7
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43da      	mvns	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6919      	ldr	r1, [r3, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	4603      	mov	r3, r0
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4403      	add	r3, r0
 800130a:	409a      	lsls	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b06      	cmp	r3, #6
 800131a:	d824      	bhi.n	8001366 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	3b05      	subs	r3, #5
 800132e:	221f      	movs	r2, #31
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43da      	mvns	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	400a      	ands	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b05      	subs	r3, #5
 8001358:	fa00 f203 	lsl.w	r2, r0, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
 8001364:	e04c      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d824      	bhi.n	80013b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b23      	subs	r3, #35	; 0x23
 8001380:	221f      	movs	r2, #31
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b23      	subs	r3, #35	; 0x23
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
 80013b6:	e023      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	3b41      	subs	r3, #65	; 0x41
 80013ca:	221f      	movs	r2, #31
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43da      	mvns	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	400a      	ands	r2, r1
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b41      	subs	r3, #65	; 0x41
 80013f4:	fa00 f203 	lsl.w	r2, r0, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10a      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1f4>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001412:	d105      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 800141a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800141e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10f      	bne.n	800144a <HAL_ADC_ConfigChannel+0x21e>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b12      	cmp	r3, #18
 8001430:	d10b      	bne.n	800144a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a25      	ldr	r2, [pc, #148]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001438:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800143c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a22      	ldr	r2, [pc, #136]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001448:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d12b      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x280>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <HAL_ADC_ConfigChannel+0x298>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d003      	beq.n	8001466 <HAL_ADC_ConfigChannel+0x23a>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b11      	cmp	r3, #17
 8001464:	d122      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 800146c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001470:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800147c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_ADC_ConfigChannel+0x298>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d111      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	0c9a      	lsrs	r2, r3, #18
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800149e:	e002      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f9      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	10000012 	.word	0x10000012
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40012300 	.word	0x40012300
 80014d0:	20000000 	.word	0x20000000
 80014d4:	431bde83 	.word	0x431bde83

080014d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <ADC_Init+0x1ec>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a77      	ldr	r2, [pc, #476]	; (80016c4 <ADC_Init+0x1ec>)
 80014e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <ADC_Init+0x1ec>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4973      	ldr	r1, [pc, #460]	; (80016c4 <ADC_Init+0x1ec>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <ADC_Init+0x1f0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00f      	b.n	80015d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0202 	bic.w	r2, r2, #2
 80015e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	005a      	lsls	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800161e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	035a      	lsls	r2, r3, #13
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	e007      	b.n	8001648 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	3b01      	subs	r3, #1
 8001664:	051a      	lsls	r2, r3, #20
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800167c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800168a:	025a      	lsls	r2, r3, #9
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	029a      	lsls	r2, r3, #10
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40012300 	.word	0x40012300
 80016c8:	0f000001 	.word	0x0f000001

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x40>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00
 8001710:	05fa0000 	.word	0x05fa0000

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	; (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	; (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff47 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff5c 	bl	8001714 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff8e 	bl	8001784 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5d 	bl	8001730 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffb0 	bl	80017ec <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e175      	b.n	8001ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8164 	bne.w	8001b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_Init+0x56>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d130      	bne.n	8001950 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b03      	cmp	r3, #3
 800195a:	d017      	beq.n	800198c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	69b9      	ldr	r1, [r7, #24]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80be 	beq.w	8001b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a3a:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d037      	beq.n	8001ad6 <HAL_GPIO_Init+0x23e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d031      	beq.n	8001ad2 <HAL_GPIO_Init+0x23a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02b      	beq.n	8001ace <HAL_GPIO_Init+0x236>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x338>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x232>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_GPIO_Init+0x33c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x340>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x22a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x344>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_GPIO_Init+0x348>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_GPIO_Init+0x34c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x350>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x21a>
 8001aae:	2309      	movs	r3, #9
 8001ab0:	e012      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	e010      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae86 	bls.w	80018b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40022400 	.word	0x40022400
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c24:	b08f      	sub	sp, #60	; 0x3c
 8001c26:	af0a      	add	r7, sp, #40	; 0x28
 8001c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e116      	b.n	8001e62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe ffac 	bl	8000bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 ffa2 	bl	8003bbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	687e      	ldr	r6, [r7, #4]
 8001c80:	466d      	mov	r5, sp
 8001c82:	f106 0410 	add.w	r4, r6, #16
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c96:	1d33      	adds	r3, r6, #4
 8001c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f001 ff36 	bl	8003b0c <USB_CoreInit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0d7      	b.n	8001e62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 ff90 	bl	8003bde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e04a      	b.n	8001d5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	333d      	adds	r3, #61	; 0x3d
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	333c      	adds	r3, #60	; 0x3c
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	b298      	uxth	r0, r3
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3342      	adds	r3, #66	; 0x42
 8001d00:	4602      	mov	r2, r0
 8001d02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	333f      	adds	r3, #63	; 0x3f
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3344      	adds	r3, #68	; 0x44
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3348      	adds	r3, #72	; 0x48
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3350      	adds	r3, #80	; 0x50
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	3301      	adds	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3af      	bcc.n	8001cc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e044      	b.n	8001df4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3b5      	bcc.n	8001d6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	687e      	ldr	r6, [r7, #4]
 8001e06:	466d      	mov	r5, sp
 8001e08:	f106 0410 	add.w	r4, r6, #16
 8001e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1c:	1d33      	adds	r3, r6, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f001 ff29 	bl	8003c78 <USB_DevInit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e014      	b.n	8001e62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f80b 	bl	8001e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 f8e3 	bl	8004026 <USB_DevDisconnect>

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	10000003 	.word	0x10000003

08001eb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe ffb9 	bl	8000e78 <HAL_GetTick>
 8001f06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f08:	e009      	b.n	8001f1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f0a:	f7fe ffb5 	bl	8000e78 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f18:	d901      	bls.n	8001f1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e022      	b.n	8001f64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f38:	f7fe ff9e 	bl	8000e78 <HAL_GetTick>
 8001f3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f3e:	e009      	b.n	8001f54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f40:	f7fe ff9a 	bl	8000e78 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f4e:	d901      	bls.n	8001f54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e007      	b.n	8001f64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f60:	d1ee      	bne.n	8001f40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40007000 	.word	0x40007000

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e29b      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8087 	beq.w	80020a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f98:	4b96      	ldr	r3, [pc, #600]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d00c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa4:	4b93      	ldr	r3, [pc, #588]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d112      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62>
 8001fb0:	4b90      	ldr	r3, [pc, #576]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d06c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x130>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d168      	bne.n	80020a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e275      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x7a>
 8001fe0:	4b84      	ldr	r3, [pc, #528]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a83      	ldr	r2, [pc, #524]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e02e      	b.n	800204c <HAL_RCC_OscConfig+0xd8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x9c>
 8001ff6:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a7e      	ldr	r2, [pc, #504]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7b      	ldr	r2, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xd8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0xc0>
 800201a:	4b76      	ldr	r3, [pc, #472]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a75      	ldr	r2, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b73      	ldr	r3, [pc, #460]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a72      	ldr	r2, [pc, #456]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xd8>
 8002034:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b6c      	ldr	r3, [pc, #432]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6b      	ldr	r2, [pc, #428]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe ff10 	bl	8000e78 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe ff0c 	bl	8000e78 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e229      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xe8>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe fefc 	bl	8000e78 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7fe fef8 	bl	8000e78 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e215      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x110>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d069      	beq.n	8002186 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x190>
 80020ca:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x17a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1e9      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	493d      	ldr	r1, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e040      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d023      	beq.n	8002154 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe feae 	bl	8000e78 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe feaa 	bl	8000e78 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1c7      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4929      	ldr	r1, [pc, #164]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
 8002152:	e018      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe fe8a 	bl	8000e78 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7fe fe86 	bl	8000e78 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1a3      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d038      	beq.n	8002204 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 800219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7fe fe67 	bl	8000e78 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7fe fe63 	bl	8000e78 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e180      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x23a>
 80021cc:	e01a      	b.n	8002204 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe fe4d 	bl	8000e78 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fe49 	bl	8000e78 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d903      	bls.n	80021f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e166      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
 80021f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b92      	ldr	r3, [pc, #584]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a4 	beq.w	800235a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002212:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a88      	ldr	r2, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	4b83      	ldr	r3, [pc, #524]	; (8002448 <HAL_RCC_OscConfig+0x4d4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002246:	4b80      	ldr	r3, [pc, #512]	; (8002448 <HAL_RCC_OscConfig+0x4d4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7f      	ldr	r2, [pc, #508]	; (8002448 <HAL_RCC_OscConfig+0x4d4>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7fe fe11 	bl	8000e78 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7fe fe0d 	bl	8000e78 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e12a      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226c:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x4d4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x31a>
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a6f      	ldr	r2, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e02d      	b.n	80022ea <HAL_RCC_OscConfig+0x376>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x33c>
 8002296:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a6a      	ldr	r2, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	e01c      	b.n	80022ea <HAL_RCC_OscConfig+0x376>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x35e>
 80022b8:	4b62      	ldr	r3, [pc, #392]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
 80022c4:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a5e      	ldr	r2, [pc, #376]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x376>
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a58      	ldr	r2, [pc, #352]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d015      	beq.n	800231e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7fe fdc1 	bl	8000e78 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fdbd 	bl	8000e78 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0d8      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ee      	beq.n	80022fa <HAL_RCC_OscConfig+0x386>
 800231c:	e014      	b.n	8002348 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7fe fdab 	bl	8000e78 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fda7 	bl	8000e78 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0c2      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ee      	bne.n	8002326 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a3c      	ldr	r2, [pc, #240]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80ae 	beq.w	80024c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002364:	4b37      	ldr	r3, [pc, #220]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d06d      	beq.n	800244c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d14b      	bne.n	8002410 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fd78 	bl	8000e78 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fd74 	bl	8000e78 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e091      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	3b01      	subs	r3, #1
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	071b      	lsls	r3, r3, #28
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fd46 	bl	8000e78 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fd42 	bl	8000e78 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e05f      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x47c>
 800240e:	e057      	b.n	80024c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fd2c 	bl	8000e78 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002424:	f7fe fd28 	bl	8000e78 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e045      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002436:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x4b0>
 8002442:	e03d      	b.n	80024c0 <HAL_RCC_OscConfig+0x54c>
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_OscConfig+0x558>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d030      	beq.n	80024bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d129      	bne.n	80024bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d122      	bne.n	80024bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800247c:	4013      	ands	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002482:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002484:	4293      	cmp	r3, r2
 8002486:	d119      	bne.n	80024bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	3b01      	subs	r3, #1
 8002496:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d10f      	bne.n	80024bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d0      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d910      	bls.n	8002518 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 020f 	bic.w	r2, r3, #15
 80024fe:	4965      	ldr	r1, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 800254e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002552:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d040      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d115      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e073      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06b      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4936      	ldr	r1, [pc, #216]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fc58 	bl	8000e78 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7fe fc54 	bl	8000e78 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e053      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d210      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 020f 	bic.w	r2, r3, #15
 800260a:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002662:	f000 f821 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002666:	4602      	mov	r2, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1cc>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1d0>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fbb4 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00
 8002698:	40023800 	.word	0x40023800
 800269c:	080049dc 	.word	0x080049dc
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	2300      	movs	r3, #0
 80026ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d00d      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x40>
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	f200 80bd 	bhi.w	800284c <HAL_RCC_GetSysClockFreq+0x1a4>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x34>
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026da:	e0b7      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026de:	60bb      	str	r3, [r7, #8]
      break;
 80026e0:	e0b7      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e2:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026e4:	60bb      	str	r3, [r7, #8]
      break;
 80026e6:	e0b4      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e8:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026f2:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04d      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fe:	4b58      	ldr	r3, [pc, #352]	; (8002860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	099b      	lsrs	r3, r3, #6
 8002704:	461a      	mov	r2, r3
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	ea02 0800 	and.w	r8, r2, r0
 8002716:	ea03 0901 	and.w	r9, r3, r1
 800271a:	4640      	mov	r0, r8
 800271c:	4649      	mov	r1, r9
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	014b      	lsls	r3, r1, #5
 8002728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800272c:	0142      	lsls	r2, r0, #5
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	ebb0 0008 	subs.w	r0, r0, r8
 8002736:	eb61 0109 	sbc.w	r1, r1, r9
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	018b      	lsls	r3, r1, #6
 8002744:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002748:	0182      	lsls	r2, r0, #6
 800274a:	1a12      	subs	r2, r2, r0
 800274c:	eb63 0301 	sbc.w	r3, r3, r1
 8002750:	f04f 0000 	mov.w	r0, #0
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	00d9      	lsls	r1, r3, #3
 800275a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800275e:	00d0      	lsls	r0, r2, #3
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	eb12 0208 	adds.w	r2, r2, r8
 8002768:	eb43 0309 	adc.w	r3, r3, r9
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	0259      	lsls	r1, r3, #9
 8002776:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800277a:	0250      	lsls	r0, r2, #9
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	461a      	mov	r2, r3
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	f7fd fda8 	bl	80002e0 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e04a      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	099b      	lsrs	r3, r3, #6
 80027a0:	461a      	mov	r2, r3
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	ea02 0400 	and.w	r4, r2, r0
 80027b2:	ea03 0501 	and.w	r5, r3, r1
 80027b6:	4620      	mov	r0, r4
 80027b8:	4629      	mov	r1, r5
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	014b      	lsls	r3, r1, #5
 80027c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027c8:	0142      	lsls	r2, r0, #5
 80027ca:	4610      	mov	r0, r2
 80027cc:	4619      	mov	r1, r3
 80027ce:	1b00      	subs	r0, r0, r4
 80027d0:	eb61 0105 	sbc.w	r1, r1, r5
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	018b      	lsls	r3, r1, #6
 80027de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027e2:	0182      	lsls	r2, r0, #6
 80027e4:	1a12      	subs	r2, r2, r0
 80027e6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	00d9      	lsls	r1, r3, #3
 80027f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027f8:	00d0      	lsls	r0, r2, #3
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	1912      	adds	r2, r2, r4
 8002800:	eb45 0303 	adc.w	r3, r5, r3
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	0299      	lsls	r1, r3, #10
 800280e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002812:	0290      	lsls	r0, r2, #10
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f7fd fd5c 	bl	80002e0 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4613      	mov	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	60bb      	str	r3, [r7, #8]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800284e:	60bb      	str	r3, [r7, #8]
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	68bb      	ldr	r3, [r7, #8]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	00f42400 	.word	0x00f42400
 8002868:	007a1200 	.word	0x007a1200

0800286c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_RCC_GetHCLKFreq+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000000 	.word	0x20000000

08002884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002888:	f7ff fff0 	bl	800286c <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4903      	ldr	r1, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	080049ec 	.word	0x080049ec

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b0:	f7ff ffdc 	bl	800286c <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0b5b      	lsrs	r3, r3, #13
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080049ec 	.word	0x080049ec

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028fc:	4b69      	ldr	r3, [pc, #420]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a68      	ldr	r2, [pc, #416]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	4b66      	ldr	r3, [pc, #408]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	4964      	ldr	r1, [pc, #400]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d017      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002934:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	4959      	ldr	r1, [pc, #356]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800294c:	d101      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d017      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800296a:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002970:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	494a      	ldr	r1, [pc, #296]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 808b 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6413      	str	r3, [r2, #64]	; 0x40
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fa4c 	bl	8000e78 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fe fa48 	bl	8000e78 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e38f      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a02:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d035      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d02e      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d114      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa10 	bl	8000e78 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fa0c 	bl	8000e78 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e351      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ee      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	4901      	ldr	r1, [pc, #4]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	0ffffcff 	.word	0x0ffffcff
 8002ab0:	4bb3      	ldr	r3, [pc, #716]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4ab2      	ldr	r2, [pc, #712]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002aba:	6093      	str	r3, [r2, #8]
 8002abc:	4bb0      	ldr	r3, [pc, #704]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002abe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	49ad      	ldr	r1, [pc, #692]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ada:	4ba9      	ldr	r3, [pc, #676]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae0:	4aa7      	ldr	r2, [pc, #668]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aea:	4ba5      	ldr	r3, [pc, #660]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	49a2      	ldr	r1, [pc, #648]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b08:	4b9d      	ldr	r3, [pc, #628]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b16:	499a      	ldr	r1, [pc, #616]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2a:	4b95      	ldr	r3, [pc, #596]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b38:	4991      	ldr	r1, [pc, #580]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4c:	4b8c      	ldr	r3, [pc, #560]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	4989      	ldr	r1, [pc, #548]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b6e:	4b84      	ldr	r3, [pc, #528]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4980      	ldr	r1, [pc, #512]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b90:	4b7b      	ldr	r3, [pc, #492]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4978      	ldr	r1, [pc, #480]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb2:	4b73      	ldr	r3, [pc, #460]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f023 020c 	bic.w	r2, r3, #12
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	496f      	ldr	r1, [pc, #444]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	4967      	ldr	r1, [pc, #412]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bf6:	4b62      	ldr	r3, [pc, #392]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c04:	495e      	ldr	r1, [pc, #376]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	4956      	ldr	r1, [pc, #344]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c3a:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c5c:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	4945      	ldr	r1, [pc, #276]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c7e:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8c:	493c      	ldr	r1, [pc, #240]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cae:	4934      	ldr	r1, [pc, #208]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd0:	492b      	ldr	r1, [pc, #172]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d02:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d08:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	491b      	ldr	r1, [pc, #108]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d34:	4912      	ldr	r1, [pc, #72]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d48:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d58:	4909      	ldr	r1, [pc, #36]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00f      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	4986      	ldr	r1, [pc, #536]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d98:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da8:	497d      	ldr	r1, [pc, #500]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d006      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80d6 	beq.w	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dc4:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f852 	bl	8000e78 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dd8:	f7fe f84e 	bl	8000e78 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e195      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dea:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d021      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11d      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	0e1b      	lsrs	r3, r3, #24
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	019a      	lsls	r2, r3, #6
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	071b      	lsls	r3, r3, #28
 8002e3e:	4958      	ldr	r1, [pc, #352]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02e      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e70:	d129      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e72:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e80:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	493e      	ldr	r1, [pc, #248]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eae:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f023 021f 	bic.w	r2, r3, #31
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	4938      	ldr	r1, [pc, #224]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01d      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ed2:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee6:	0f1b      	lsrs	r3, r3, #28
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	019a      	lsls	r2, r3, #6
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	4926      	ldr	r1, [pc, #152]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d011      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	019a      	lsls	r2, r3, #6
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	491a      	ldr	r1, [pc, #104]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4a:	f7fd ff95 	bl	8000e78 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f52:	f7fd ff91 	bl	8000e78 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	; 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0d8      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 80ce 	bne.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fd ff78 	bl	8000e78 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f8c:	f7fd ff74 	bl	8000e78 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d904      	bls.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0bb      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb0:	d0ec      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02e      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fda:	4b51      	ldr	r3, [pc, #324]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	0f1b      	lsrs	r3, r3, #28
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	019a      	lsls	r2, r3, #6
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	4944      	ldr	r1, [pc, #272]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800301c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	493d      	ldr	r1, [pc, #244]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d022      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003044:	d11d      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	4929      	ldr	r1, [pc, #164]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d028      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	431a      	orrs	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4917      	ldr	r1, [pc, #92]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4911      	ldr	r1, [pc, #68]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fd fec4 	bl	8000e78 <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f4:	f7fd fec0 	bl	8000e78 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e007      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800310e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003112:	d1ef      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e040      	b.n	80031b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fcd0 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8c0 	bl	80032e8 <UART_SetConfig>
 8003168:	4603      	mov	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e022      	b.n	80031b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fb16 	bl	80037ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fb9d 	bl	80038f0 <UART_CheckIdleState>
 80031b6:	4603      	mov	r3, r0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	f040 8081 	bne.w	80032dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_UART_Transmit+0x26>
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e079      	b.n	80032de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_UART_Transmit+0x38>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e072      	b.n	80032de <HAL_UART_Transmit+0x11e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2221      	movs	r2, #33	; 0x21
 800320c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320e:	f7fd fe33 	bl	8000e78 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322c:	d108      	bne.n	8003240 <HAL_UART_Transmit+0x80>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e003      	b.n	8003248 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003250:	e02c      	b.n	80032ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fb90 	bl	8003982 <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e038      	b.n	80032de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3302      	adds	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e007      	b.n	800329a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1cc      	bne.n	8003252 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	2140      	movs	r1, #64	; 0x40
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fb5d 	bl	8003982 <UART_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e005      	b.n	80032de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4ba7      	ldr	r3, [pc, #668]	; (80035b0 <UART_SetConfig+0x2c8>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	430b      	orrs	r3, r1
 800331e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	430a      	orrs	r2, r1
 8003358:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a95      	ldr	r2, [pc, #596]	; (80035b4 <UART_SetConfig+0x2cc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d120      	bne.n	80033a6 <UART_SetConfig+0xbe>
 8003364:	4b94      	ldr	r3, [pc, #592]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b03      	cmp	r3, #3
 8003370:	d816      	bhi.n	80033a0 <UART_SetConfig+0xb8>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x90>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003389 	.word	0x08003389
 800337c:	08003395 	.word	0x08003395
 8003380:	0800338f 	.word	0x0800338f
 8003384:	0800339b 	.word	0x0800339b
 8003388:	2301      	movs	r3, #1
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e14f      	b.n	800362e <UART_SetConfig+0x346>
 800338e:	2302      	movs	r3, #2
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e14c      	b.n	800362e <UART_SetConfig+0x346>
 8003394:	2304      	movs	r3, #4
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e149      	b.n	800362e <UART_SetConfig+0x346>
 800339a:	2308      	movs	r3, #8
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e146      	b.n	800362e <UART_SetConfig+0x346>
 80033a0:	2310      	movs	r3, #16
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e143      	b.n	800362e <UART_SetConfig+0x346>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a84      	ldr	r2, [pc, #528]	; (80035bc <UART_SetConfig+0x2d4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d132      	bne.n	8003416 <UART_SetConfig+0x12e>
 80033b0:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <UART_SetConfig+0x2d0>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d828      	bhi.n	8003410 <UART_SetConfig+0x128>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <UART_SetConfig+0xdc>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	08003411 	.word	0x08003411
 80033cc:	08003411 	.word	0x08003411
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003405 	.word	0x08003405
 80033d8:	08003411 	.word	0x08003411
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003411 	.word	0x08003411
 80033e4:	080033ff 	.word	0x080033ff
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003411 	.word	0x08003411
 80033f0:	08003411 	.word	0x08003411
 80033f4:	0800340b 	.word	0x0800340b
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e117      	b.n	800362e <UART_SetConfig+0x346>
 80033fe:	2302      	movs	r3, #2
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e114      	b.n	800362e <UART_SetConfig+0x346>
 8003404:	2304      	movs	r3, #4
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e111      	b.n	800362e <UART_SetConfig+0x346>
 800340a:	2308      	movs	r3, #8
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e10e      	b.n	800362e <UART_SetConfig+0x346>
 8003410:	2310      	movs	r3, #16
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e10b      	b.n	800362e <UART_SetConfig+0x346>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a69      	ldr	r2, [pc, #420]	; (80035c0 <UART_SetConfig+0x2d8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d120      	bne.n	8003462 <UART_SetConfig+0x17a>
 8003420:	4b65      	ldr	r3, [pc, #404]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800342a:	2b30      	cmp	r3, #48	; 0x30
 800342c:	d013      	beq.n	8003456 <UART_SetConfig+0x16e>
 800342e:	2b30      	cmp	r3, #48	; 0x30
 8003430:	d814      	bhi.n	800345c <UART_SetConfig+0x174>
 8003432:	2b20      	cmp	r3, #32
 8003434:	d009      	beq.n	800344a <UART_SetConfig+0x162>
 8003436:	2b20      	cmp	r3, #32
 8003438:	d810      	bhi.n	800345c <UART_SetConfig+0x174>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <UART_SetConfig+0x15c>
 800343e:	2b10      	cmp	r3, #16
 8003440:	d006      	beq.n	8003450 <UART_SetConfig+0x168>
 8003442:	e00b      	b.n	800345c <UART_SetConfig+0x174>
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e0f1      	b.n	800362e <UART_SetConfig+0x346>
 800344a:	2302      	movs	r3, #2
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e0ee      	b.n	800362e <UART_SetConfig+0x346>
 8003450:	2304      	movs	r3, #4
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e0eb      	b.n	800362e <UART_SetConfig+0x346>
 8003456:	2308      	movs	r3, #8
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e0e8      	b.n	800362e <UART_SetConfig+0x346>
 800345c:	2310      	movs	r3, #16
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e0e5      	b.n	800362e <UART_SetConfig+0x346>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <UART_SetConfig+0x2dc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d120      	bne.n	80034ae <UART_SetConfig+0x1c6>
 800346c:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <UART_SetConfig+0x2d0>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003476:	2bc0      	cmp	r3, #192	; 0xc0
 8003478:	d013      	beq.n	80034a2 <UART_SetConfig+0x1ba>
 800347a:	2bc0      	cmp	r3, #192	; 0xc0
 800347c:	d814      	bhi.n	80034a8 <UART_SetConfig+0x1c0>
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d009      	beq.n	8003496 <UART_SetConfig+0x1ae>
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	d810      	bhi.n	80034a8 <UART_SetConfig+0x1c0>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <UART_SetConfig+0x1a8>
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d006      	beq.n	800349c <UART_SetConfig+0x1b4>
 800348e:	e00b      	b.n	80034a8 <UART_SetConfig+0x1c0>
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e0cb      	b.n	800362e <UART_SetConfig+0x346>
 8003496:	2302      	movs	r3, #2
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e0c8      	b.n	800362e <UART_SetConfig+0x346>
 800349c:	2304      	movs	r3, #4
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e0c5      	b.n	800362e <UART_SetConfig+0x346>
 80034a2:	2308      	movs	r3, #8
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e0c2      	b.n	800362e <UART_SetConfig+0x346>
 80034a8:	2310      	movs	r3, #16
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e0bf      	b.n	800362e <UART_SetConfig+0x346>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a45      	ldr	r2, [pc, #276]	; (80035c8 <UART_SetConfig+0x2e0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d125      	bne.n	8003504 <UART_SetConfig+0x21c>
 80034b8:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <UART_SetConfig+0x2d0>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c6:	d017      	beq.n	80034f8 <UART_SetConfig+0x210>
 80034c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034cc:	d817      	bhi.n	80034fe <UART_SetConfig+0x216>
 80034ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d2:	d00b      	beq.n	80034ec <UART_SetConfig+0x204>
 80034d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d8:	d811      	bhi.n	80034fe <UART_SetConfig+0x216>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <UART_SetConfig+0x1fe>
 80034de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e2:	d006      	beq.n	80034f2 <UART_SetConfig+0x20a>
 80034e4:	e00b      	b.n	80034fe <UART_SetConfig+0x216>
 80034e6:	2300      	movs	r3, #0
 80034e8:	77fb      	strb	r3, [r7, #31]
 80034ea:	e0a0      	b.n	800362e <UART_SetConfig+0x346>
 80034ec:	2302      	movs	r3, #2
 80034ee:	77fb      	strb	r3, [r7, #31]
 80034f0:	e09d      	b.n	800362e <UART_SetConfig+0x346>
 80034f2:	2304      	movs	r3, #4
 80034f4:	77fb      	strb	r3, [r7, #31]
 80034f6:	e09a      	b.n	800362e <UART_SetConfig+0x346>
 80034f8:	2308      	movs	r3, #8
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e097      	b.n	800362e <UART_SetConfig+0x346>
 80034fe:	2310      	movs	r3, #16
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e094      	b.n	800362e <UART_SetConfig+0x346>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <UART_SetConfig+0x2e4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d125      	bne.n	800355a <UART_SetConfig+0x272>
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800351c:	d017      	beq.n	800354e <UART_SetConfig+0x266>
 800351e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003522:	d817      	bhi.n	8003554 <UART_SetConfig+0x26c>
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003528:	d00b      	beq.n	8003542 <UART_SetConfig+0x25a>
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352e:	d811      	bhi.n	8003554 <UART_SetConfig+0x26c>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <UART_SetConfig+0x254>
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d006      	beq.n	8003548 <UART_SetConfig+0x260>
 800353a:	e00b      	b.n	8003554 <UART_SetConfig+0x26c>
 800353c:	2301      	movs	r3, #1
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e075      	b.n	800362e <UART_SetConfig+0x346>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e072      	b.n	800362e <UART_SetConfig+0x346>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e06f      	b.n	800362e <UART_SetConfig+0x346>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e06c      	b.n	800362e <UART_SetConfig+0x346>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e069      	b.n	800362e <UART_SetConfig+0x346>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <UART_SetConfig+0x2e8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d137      	bne.n	80035d4 <UART_SetConfig+0x2ec>
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800356e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003572:	d017      	beq.n	80035a4 <UART_SetConfig+0x2bc>
 8003574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003578:	d817      	bhi.n	80035aa <UART_SetConfig+0x2c2>
 800357a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357e:	d00b      	beq.n	8003598 <UART_SetConfig+0x2b0>
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d811      	bhi.n	80035aa <UART_SetConfig+0x2c2>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <UART_SetConfig+0x2aa>
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358e:	d006      	beq.n	800359e <UART_SetConfig+0x2b6>
 8003590:	e00b      	b.n	80035aa <UART_SetConfig+0x2c2>
 8003592:	2300      	movs	r3, #0
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e04a      	b.n	800362e <UART_SetConfig+0x346>
 8003598:	2302      	movs	r3, #2
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e047      	b.n	800362e <UART_SetConfig+0x346>
 800359e:	2304      	movs	r3, #4
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e044      	b.n	800362e <UART_SetConfig+0x346>
 80035a4:	2308      	movs	r3, #8
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e041      	b.n	800362e <UART_SetConfig+0x346>
 80035aa:	2310      	movs	r3, #16
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e03e      	b.n	800362e <UART_SetConfig+0x346>
 80035b0:	efff69f3 	.word	0xefff69f3
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40004400 	.word	0x40004400
 80035c0:	40004800 	.word	0x40004800
 80035c4:	40004c00 	.word	0x40004c00
 80035c8:	40005000 	.word	0x40005000
 80035cc:	40011400 	.word	0x40011400
 80035d0:	40007800 	.word	0x40007800
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a71      	ldr	r2, [pc, #452]	; (80037a0 <UART_SetConfig+0x4b8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d125      	bne.n	800362a <UART_SetConfig+0x342>
 80035de:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <UART_SetConfig+0x4bc>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035ec:	d017      	beq.n	800361e <UART_SetConfig+0x336>
 80035ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f2:	d817      	bhi.n	8003624 <UART_SetConfig+0x33c>
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f8:	d00b      	beq.n	8003612 <UART_SetConfig+0x32a>
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fe:	d811      	bhi.n	8003624 <UART_SetConfig+0x33c>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <UART_SetConfig+0x324>
 8003604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003608:	d006      	beq.n	8003618 <UART_SetConfig+0x330>
 800360a:	e00b      	b.n	8003624 <UART_SetConfig+0x33c>
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e00d      	b.n	800362e <UART_SetConfig+0x346>
 8003612:	2302      	movs	r3, #2
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e00a      	b.n	800362e <UART_SetConfig+0x346>
 8003618:	2304      	movs	r3, #4
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e007      	b.n	800362e <UART_SetConfig+0x346>
 800361e:	2308      	movs	r3, #8
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e004      	b.n	800362e <UART_SetConfig+0x346>
 8003624:	2310      	movs	r3, #16
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e001      	b.n	800362e <UART_SetConfig+0x346>
 800362a:	2310      	movs	r3, #16
 800362c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003636:	d15a      	bne.n	80036ee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	2b08      	cmp	r3, #8
 800363c:	d827      	bhi.n	800368e <UART_SetConfig+0x3a6>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x35c>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003669 	.word	0x08003669
 8003648:	08003671 	.word	0x08003671
 800364c:	08003679 	.word	0x08003679
 8003650:	0800368f 	.word	0x0800368f
 8003654:	0800367f 	.word	0x0800367f
 8003658:	0800368f 	.word	0x0800368f
 800365c:	0800368f 	.word	0x0800368f
 8003660:	0800368f 	.word	0x0800368f
 8003664:	08003687 	.word	0x08003687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff f90c 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
 800366c:	61b8      	str	r0, [r7, #24]
        break;
 800366e:	e013      	b.n	8003698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003670:	f7ff f91c 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8003674:	61b8      	str	r0, [r7, #24]
        break;
 8003676:	e00f      	b.n	8003698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <UART_SetConfig+0x4c0>)
 800367a:	61bb      	str	r3, [r7, #24]
        break;
 800367c:	e00c      	b.n	8003698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7ff f813 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8003682:	61b8      	str	r0, [r7, #24]
        break;
 8003684:	e008      	b.n	8003698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e004      	b.n	8003698 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	77bb      	strb	r3, [r7, #30]
        break;
 8003696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d074      	beq.n	8003788 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	005a      	lsls	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	441a      	add	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	d916      	bls.n	80036e8 <UART_SetConfig+0x400>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d212      	bcs.n	80036e8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f023 030f 	bic.w	r3, r3, #15
 80036ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	4313      	orrs	r3, r2
 80036dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	89fa      	ldrh	r2, [r7, #14]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e04f      	b.n	8003788 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77bb      	strb	r3, [r7, #30]
 80036ec:	e04c      	b.n	8003788 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ee:	7ffb      	ldrb	r3, [r7, #31]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d828      	bhi.n	8003746 <UART_SetConfig+0x45e>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x414>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003747 	.word	0x08003747
 800370c:	08003737 	.word	0x08003737
 8003710:	08003747 	.word	0x08003747
 8003714:	08003747 	.word	0x08003747
 8003718:	08003747 	.word	0x08003747
 800371c:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7ff f8b0 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
 8003724:	61b8      	str	r0, [r7, #24]
        break;
 8003726:	e013      	b.n	8003750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7ff f8c0 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 800372c:	61b8      	str	r0, [r7, #24]
        break;
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <UART_SetConfig+0x4c0>)
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e00c      	b.n	8003750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7fe ffb7 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 800373a:	61b8      	str	r0, [r7, #24]
        break;
 800373c:	e008      	b.n	8003750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e004      	b.n	8003750 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	77bb      	strb	r3, [r7, #30]
        break;
 800374e:	bf00      	nop
    }

    if (pclk != 0U)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	085a      	lsrs	r2, r3, #1
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	441a      	add	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d909      	bls.n	8003784 <UART_SetConfig+0x49c>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d205      	bcs.n	8003784 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	e001      	b.n	8003788 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003794:	7fbb      	ldrb	r3, [r7, #30]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40007c00 	.word	0x40007c00
 80037a4:	40023800 	.word	0x40023800
 80037a8:	00f42400 	.word	0x00f42400

080037ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038aa:	d10a      	bne.n	80038c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003900:	f7fd faba 	bl	8000e78 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10e      	bne.n	8003932 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f82d 	bl	8003982 <UART_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e023      	b.n	800397a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d10e      	bne.n	800395e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f817 	bl	8003982 <UART_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00d      	b.n	800397a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b09c      	sub	sp, #112	; 0x70
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003992:	e0a5      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399a:	f000 80a1 	beq.w	8003ae0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fd fa6b 	bl	8000e78 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80039ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d13e      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039bc:	e853 3f00 	ldrex	r3, [r3]
 80039c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039c8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e6      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	663b      	str	r3, [r7, #96]	; 0x60
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a06:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e5      	bne.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e067      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d04f      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d147      	bne.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e6      	bne.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003aac:	623a      	str	r2, [r7, #32]
 8003aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	69f9      	ldr	r1, [r7, #28]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e5      	bne.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e010      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	f43f af4a 	beq.w	8003994 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3770      	adds	r7, #112	; 0x70
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	f107 001c 	add.w	r0, r7, #28
 8003b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d120      	bne.n	8003b66 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <USB_CoreInit+0xac>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa92 	bl	8004084 <USB_CoreReset>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e010      	b.n	8003b88 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa86 	bl	8004084 <USB_CoreReset>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d10b      	bne.n	8003ba6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f043 0206 	orr.w	r2, r3, #6
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bb2:	b004      	add	sp, #16
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	ffbdffbf 	.word	0xffbdffbf

08003bbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 0201 	bic.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d115      	bne.n	8003c2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7fd f93f 	bl	8000e90 <HAL_Delay>
      ms++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fa25 	bl	8004068 <USB_GetMode>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d01e      	beq.n	8003c62 <USB_SetCurrentMode+0x84>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b31      	cmp	r3, #49	; 0x31
 8003c28:	d9f0      	bls.n	8003c0c <USB_SetCurrentMode+0x2e>
 8003c2a:	e01a      	b.n	8003c62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d115      	bne.n	8003c5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f7fd f926 	bl	8000e90 <HAL_Delay>
      ms++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa0c 	bl	8004068 <USB_GetMode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <USB_SetCurrentMode+0x84>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b31      	cmp	r3, #49	; 0x31
 8003c5a:	d9f0      	bls.n	8003c3e <USB_SetCurrentMode+0x60>
 8003c5c:	e001      	b.n	8003c62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e005      	b.n	8003c6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b32      	cmp	r3, #50	; 0x32
 8003c66:	d101      	bne.n	8003c6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c78:	b084      	sub	sp, #16
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e009      	b.n	8003cac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3340      	adds	r3, #64	; 0x40
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0e      	cmp	r3, #14
 8003cb0:	d9f2      	bls.n	8003c98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11c      	bne.n	8003cf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e005      	b.n	8003cfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	4619      	mov	r1, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	461a      	mov	r2, r3
 8003d1a:	680b      	ldr	r3, [r1, #0]
 8003d1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10c      	bne.n	8003d3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f961 	bl	8003ff4 <USB_SetDevSpeed>
 8003d32:	e008      	b.n	8003d46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d34:	2101      	movs	r1, #1
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f95c 	bl	8003ff4 <USB_SetDevSpeed>
 8003d3c:	e003      	b.n	8003d46 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d3e:	2103      	movs	r1, #3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f957 	bl	8003ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d46:	2110      	movs	r1, #16
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8f3 	bl	8003f34 <USB_FlushTxFifo>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f91d 	bl	8003f98 <USB_FlushRxFifo>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2300      	movs	r3, #0
 8003d72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	461a      	mov	r2, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	e043      	b.n	8003e1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da8:	d118      	bne.n	8003ddc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e013      	b.n	8003dee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e008      	b.n	8003dee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	461a      	mov	r2, r3
 8003dea:	2300      	movs	r3, #0
 8003dec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	3301      	adds	r3, #1
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3b7      	bcc.n	8003d92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	e043      	b.n	8003eb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e3e:	d118      	bne.n	8003e72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e52:	461a      	mov	r2, r3
 8003e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e013      	b.n	8003e84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e008      	b.n	8003e84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2300      	movs	r3, #0
 8003e82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	2300      	movs	r3, #0
 8003e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ea8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3301      	adds	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3b7      	bcc.n	8003e28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ed8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f043 0210 	orr.w	r2, r3, #16
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <USB_DevInit+0x2b4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f043 0208 	orr.w	r2, r3, #8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <USB_DevInit+0x2b8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f28:	b004      	add	sp, #16
 8003f2a:	4770      	bx	lr
 8003f2c:	803c3800 	.word	0x803c3800
 8003f30:	40000004 	.word	0x40000004

08003f34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <USB_FlushTxFifo+0x60>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e01a      	b.n	8003f88 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	daf3      	bge.n	8003f42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <USB_FlushTxFifo+0x60>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e006      	b.n	8003f88 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d0f1      	beq.n	8003f6a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	00030d40 	.word	0x00030d40

08003f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <USB_FlushRxFifo+0x58>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e017      	b.n	8003fe4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	daf3      	bge.n	8003fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <USB_FlushRxFifo+0x58>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e006      	b.n	8003fe4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d0f1      	beq.n	8003fc6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	00030d40 	.word	0x00030d40

08003ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004040:	f023 0303 	bic.w	r3, r3, #3
 8004044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0301 	and.w	r3, r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <USB_CoreReset+0x60>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e01a      	b.n	80040d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	daf3      	bge.n	8004090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <USB_CoreReset+0x60>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e006      	b.n	80040d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d0f1      	beq.n	80040b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	00030d40 	.word	0x00030d40

080040e8 <__errno>:
 80040e8:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <__errno+0x8>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c

080040f4 <__libc_init_array>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	4d0d      	ldr	r5, [pc, #52]	; (800412c <__libc_init_array+0x38>)
 80040f8:	4c0d      	ldr	r4, [pc, #52]	; (8004130 <__libc_init_array+0x3c>)
 80040fa:	1b64      	subs	r4, r4, r5
 80040fc:	10a4      	asrs	r4, r4, #2
 80040fe:	2600      	movs	r6, #0
 8004100:	42a6      	cmp	r6, r4
 8004102:	d109      	bne.n	8004118 <__libc_init_array+0x24>
 8004104:	4d0b      	ldr	r5, [pc, #44]	; (8004134 <__libc_init_array+0x40>)
 8004106:	4c0c      	ldr	r4, [pc, #48]	; (8004138 <__libc_init_array+0x44>)
 8004108:	f000 fc4e 	bl	80049a8 <_init>
 800410c:	1b64      	subs	r4, r4, r5
 800410e:	10a4      	asrs	r4, r4, #2
 8004110:	2600      	movs	r6, #0
 8004112:	42a6      	cmp	r6, r4
 8004114:	d105      	bne.n	8004122 <__libc_init_array+0x2e>
 8004116:	bd70      	pop	{r4, r5, r6, pc}
 8004118:	f855 3b04 	ldr.w	r3, [r5], #4
 800411c:	4798      	blx	r3
 800411e:	3601      	adds	r6, #1
 8004120:	e7ee      	b.n	8004100 <__libc_init_array+0xc>
 8004122:	f855 3b04 	ldr.w	r3, [r5], #4
 8004126:	4798      	blx	r3
 8004128:	3601      	adds	r6, #1
 800412a:	e7f2      	b.n	8004112 <__libc_init_array+0x1e>
 800412c:	08004a30 	.word	0x08004a30
 8004130:	08004a30 	.word	0x08004a30
 8004134:	08004a30 	.word	0x08004a30
 8004138:	08004a34 	.word	0x08004a34

0800413c <memset>:
 800413c:	4402      	add	r2, r0
 800413e:	4603      	mov	r3, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <siprintf>:
 800414c:	b40e      	push	{r1, r2, r3}
 800414e:	b500      	push	{lr}
 8004150:	b09c      	sub	sp, #112	; 0x70
 8004152:	ab1d      	add	r3, sp, #116	; 0x74
 8004154:	9002      	str	r0, [sp, #8]
 8004156:	9006      	str	r0, [sp, #24]
 8004158:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <siprintf+0x38>)
 800415e:	9107      	str	r1, [sp, #28]
 8004160:	9104      	str	r1, [sp, #16]
 8004162:	4909      	ldr	r1, [pc, #36]	; (8004188 <siprintf+0x3c>)
 8004164:	f853 2b04 	ldr.w	r2, [r3], #4
 8004168:	9105      	str	r1, [sp, #20]
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	a902      	add	r1, sp, #8
 8004170:	f000 f868 	bl	8004244 <_svfiprintf_r>
 8004174:	9b02      	ldr	r3, [sp, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	b01c      	add	sp, #112	; 0x70
 800417c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004180:	b003      	add	sp, #12
 8004182:	4770      	bx	lr
 8004184:	2000000c 	.word	0x2000000c
 8004188:	ffff0208 	.word	0xffff0208

0800418c <__ssputs_r>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	688e      	ldr	r6, [r1, #8]
 8004192:	429e      	cmp	r6, r3
 8004194:	4682      	mov	sl, r0
 8004196:	460c      	mov	r4, r1
 8004198:	4690      	mov	r8, r2
 800419a:	461f      	mov	r7, r3
 800419c:	d838      	bhi.n	8004210 <__ssputs_r+0x84>
 800419e:	898a      	ldrh	r2, [r1, #12]
 80041a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041a4:	d032      	beq.n	800420c <__ssputs_r+0x80>
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	6909      	ldr	r1, [r1, #16]
 80041aa:	eba5 0901 	sub.w	r9, r5, r1
 80041ae:	6965      	ldr	r5, [r4, #20]
 80041b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b8:	3301      	adds	r3, #1
 80041ba:	444b      	add	r3, r9
 80041bc:	106d      	asrs	r5, r5, #1
 80041be:	429d      	cmp	r5, r3
 80041c0:	bf38      	it	cc
 80041c2:	461d      	movcc	r5, r3
 80041c4:	0553      	lsls	r3, r2, #21
 80041c6:	d531      	bpl.n	800422c <__ssputs_r+0xa0>
 80041c8:	4629      	mov	r1, r5
 80041ca:	f000 fb47 	bl	800485c <_malloc_r>
 80041ce:	4606      	mov	r6, r0
 80041d0:	b950      	cbnz	r0, 80041e8 <__ssputs_r+0x5c>
 80041d2:	230c      	movs	r3, #12
 80041d4:	f8ca 3000 	str.w	r3, [sl]
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e8:	6921      	ldr	r1, [r4, #16]
 80041ea:	464a      	mov	r2, r9
 80041ec:	f000 fabe 	bl	800476c <memcpy>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	6126      	str	r6, [r4, #16]
 80041fe:	6165      	str	r5, [r4, #20]
 8004200:	444e      	add	r6, r9
 8004202:	eba5 0509 	sub.w	r5, r5, r9
 8004206:	6026      	str	r6, [r4, #0]
 8004208:	60a5      	str	r5, [r4, #8]
 800420a:	463e      	mov	r6, r7
 800420c:	42be      	cmp	r6, r7
 800420e:	d900      	bls.n	8004212 <__ssputs_r+0x86>
 8004210:	463e      	mov	r6, r7
 8004212:	4632      	mov	r2, r6
 8004214:	6820      	ldr	r0, [r4, #0]
 8004216:	4641      	mov	r1, r8
 8004218:	f000 fab6 	bl	8004788 <memmove>
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	6822      	ldr	r2, [r4, #0]
 8004220:	1b9b      	subs	r3, r3, r6
 8004222:	4432      	add	r2, r6
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	6022      	str	r2, [r4, #0]
 8004228:	2000      	movs	r0, #0
 800422a:	e7db      	b.n	80041e4 <__ssputs_r+0x58>
 800422c:	462a      	mov	r2, r5
 800422e:	f000 fb6f 	bl	8004910 <_realloc_r>
 8004232:	4606      	mov	r6, r0
 8004234:	2800      	cmp	r0, #0
 8004236:	d1e1      	bne.n	80041fc <__ssputs_r+0x70>
 8004238:	6921      	ldr	r1, [r4, #16]
 800423a:	4650      	mov	r0, sl
 800423c:	f000 fabe 	bl	80047bc <_free_r>
 8004240:	e7c7      	b.n	80041d2 <__ssputs_r+0x46>
	...

08004244 <_svfiprintf_r>:
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	4698      	mov	r8, r3
 800424a:	898b      	ldrh	r3, [r1, #12]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	b09d      	sub	sp, #116	; 0x74
 8004250:	4607      	mov	r7, r0
 8004252:	460d      	mov	r5, r1
 8004254:	4614      	mov	r4, r2
 8004256:	d50e      	bpl.n	8004276 <_svfiprintf_r+0x32>
 8004258:	690b      	ldr	r3, [r1, #16]
 800425a:	b963      	cbnz	r3, 8004276 <_svfiprintf_r+0x32>
 800425c:	2140      	movs	r1, #64	; 0x40
 800425e:	f000 fafd 	bl	800485c <_malloc_r>
 8004262:	6028      	str	r0, [r5, #0]
 8004264:	6128      	str	r0, [r5, #16]
 8004266:	b920      	cbnz	r0, 8004272 <_svfiprintf_r+0x2e>
 8004268:	230c      	movs	r3, #12
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004270:	e0d1      	b.n	8004416 <_svfiprintf_r+0x1d2>
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	616b      	str	r3, [r5, #20]
 8004276:	2300      	movs	r3, #0
 8004278:	9309      	str	r3, [sp, #36]	; 0x24
 800427a:	2320      	movs	r3, #32
 800427c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004280:	f8cd 800c 	str.w	r8, [sp, #12]
 8004284:	2330      	movs	r3, #48	; 0x30
 8004286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004430 <_svfiprintf_r+0x1ec>
 800428a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800428e:	f04f 0901 	mov.w	r9, #1
 8004292:	4623      	mov	r3, r4
 8004294:	469a      	mov	sl, r3
 8004296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800429a:	b10a      	cbz	r2, 80042a0 <_svfiprintf_r+0x5c>
 800429c:	2a25      	cmp	r2, #37	; 0x25
 800429e:	d1f9      	bne.n	8004294 <_svfiprintf_r+0x50>
 80042a0:	ebba 0b04 	subs.w	fp, sl, r4
 80042a4:	d00b      	beq.n	80042be <_svfiprintf_r+0x7a>
 80042a6:	465b      	mov	r3, fp
 80042a8:	4622      	mov	r2, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	4638      	mov	r0, r7
 80042ae:	f7ff ff6d 	bl	800418c <__ssputs_r>
 80042b2:	3001      	adds	r0, #1
 80042b4:	f000 80aa 	beq.w	800440c <_svfiprintf_r+0x1c8>
 80042b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ba:	445a      	add	r2, fp
 80042bc:	9209      	str	r2, [sp, #36]	; 0x24
 80042be:	f89a 3000 	ldrb.w	r3, [sl]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a2 	beq.w	800440c <_svfiprintf_r+0x1c8>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d2:	f10a 0a01 	add.w	sl, sl, #1
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042de:	931a      	str	r3, [sp, #104]	; 0x68
 80042e0:	4654      	mov	r4, sl
 80042e2:	2205      	movs	r2, #5
 80042e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e8:	4851      	ldr	r0, [pc, #324]	; (8004430 <_svfiprintf_r+0x1ec>)
 80042ea:	f7fb ffa9 	bl	8000240 <memchr>
 80042ee:	9a04      	ldr	r2, [sp, #16]
 80042f0:	b9d8      	cbnz	r0, 800432a <_svfiprintf_r+0xe6>
 80042f2:	06d0      	lsls	r0, r2, #27
 80042f4:	bf44      	itt	mi
 80042f6:	2320      	movmi	r3, #32
 80042f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fc:	0711      	lsls	r1, r2, #28
 80042fe:	bf44      	itt	mi
 8004300:	232b      	movmi	r3, #43	; 0x2b
 8004302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004306:	f89a 3000 	ldrb.w	r3, [sl]
 800430a:	2b2a      	cmp	r3, #42	; 0x2a
 800430c:	d015      	beq.n	800433a <_svfiprintf_r+0xf6>
 800430e:	9a07      	ldr	r2, [sp, #28]
 8004310:	4654      	mov	r4, sl
 8004312:	2000      	movs	r0, #0
 8004314:	f04f 0c0a 	mov.w	ip, #10
 8004318:	4621      	mov	r1, r4
 800431a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431e:	3b30      	subs	r3, #48	; 0x30
 8004320:	2b09      	cmp	r3, #9
 8004322:	d94e      	bls.n	80043c2 <_svfiprintf_r+0x17e>
 8004324:	b1b0      	cbz	r0, 8004354 <_svfiprintf_r+0x110>
 8004326:	9207      	str	r2, [sp, #28]
 8004328:	e014      	b.n	8004354 <_svfiprintf_r+0x110>
 800432a:	eba0 0308 	sub.w	r3, r0, r8
 800432e:	fa09 f303 	lsl.w	r3, r9, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	46a2      	mov	sl, r4
 8004338:	e7d2      	b.n	80042e0 <_svfiprintf_r+0x9c>
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	9103      	str	r1, [sp, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfbb      	ittet	lt
 8004346:	425b      	neglt	r3, r3
 8004348:	f042 0202 	orrlt.w	r2, r2, #2
 800434c:	9307      	strge	r3, [sp, #28]
 800434e:	9307      	strlt	r3, [sp, #28]
 8004350:	bfb8      	it	lt
 8004352:	9204      	strlt	r2, [sp, #16]
 8004354:	7823      	ldrb	r3, [r4, #0]
 8004356:	2b2e      	cmp	r3, #46	; 0x2e
 8004358:	d10c      	bne.n	8004374 <_svfiprintf_r+0x130>
 800435a:	7863      	ldrb	r3, [r4, #1]
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d135      	bne.n	80043cc <_svfiprintf_r+0x188>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	9203      	str	r2, [sp, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	bfb8      	it	lt
 800436c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004370:	3402      	adds	r4, #2
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004440 <_svfiprintf_r+0x1fc>
 8004378:	7821      	ldrb	r1, [r4, #0]
 800437a:	2203      	movs	r2, #3
 800437c:	4650      	mov	r0, sl
 800437e:	f7fb ff5f 	bl	8000240 <memchr>
 8004382:	b140      	cbz	r0, 8004396 <_svfiprintf_r+0x152>
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	eba0 000a 	sub.w	r0, r0, sl
 800438a:	fa03 f000 	lsl.w	r0, r3, r0
 800438e:	9b04      	ldr	r3, [sp, #16]
 8004390:	4303      	orrs	r3, r0
 8004392:	3401      	adds	r4, #1
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439a:	4826      	ldr	r0, [pc, #152]	; (8004434 <_svfiprintf_r+0x1f0>)
 800439c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043a0:	2206      	movs	r2, #6
 80043a2:	f7fb ff4d 	bl	8000240 <memchr>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d038      	beq.n	800441c <_svfiprintf_r+0x1d8>
 80043aa:	4b23      	ldr	r3, [pc, #140]	; (8004438 <_svfiprintf_r+0x1f4>)
 80043ac:	bb1b      	cbnz	r3, 80043f6 <_svfiprintf_r+0x1b2>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	3307      	adds	r3, #7
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	3308      	adds	r3, #8
 80043b8:	9303      	str	r3, [sp, #12]
 80043ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043bc:	4433      	add	r3, r6
 80043be:	9309      	str	r3, [sp, #36]	; 0x24
 80043c0:	e767      	b.n	8004292 <_svfiprintf_r+0x4e>
 80043c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c6:	460c      	mov	r4, r1
 80043c8:	2001      	movs	r0, #1
 80043ca:	e7a5      	b.n	8004318 <_svfiprintf_r+0xd4>
 80043cc:	2300      	movs	r3, #0
 80043ce:	3401      	adds	r4, #1
 80043d0:	9305      	str	r3, [sp, #20]
 80043d2:	4619      	mov	r1, r3
 80043d4:	f04f 0c0a 	mov.w	ip, #10
 80043d8:	4620      	mov	r0, r4
 80043da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043de:	3a30      	subs	r2, #48	; 0x30
 80043e0:	2a09      	cmp	r2, #9
 80043e2:	d903      	bls.n	80043ec <_svfiprintf_r+0x1a8>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0c5      	beq.n	8004374 <_svfiprintf_r+0x130>
 80043e8:	9105      	str	r1, [sp, #20]
 80043ea:	e7c3      	b.n	8004374 <_svfiprintf_r+0x130>
 80043ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80043f0:	4604      	mov	r4, r0
 80043f2:	2301      	movs	r3, #1
 80043f4:	e7f0      	b.n	80043d8 <_svfiprintf_r+0x194>
 80043f6:	ab03      	add	r3, sp, #12
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	462a      	mov	r2, r5
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <_svfiprintf_r+0x1f8>)
 80043fe:	a904      	add	r1, sp, #16
 8004400:	4638      	mov	r0, r7
 8004402:	f3af 8000 	nop.w
 8004406:	1c42      	adds	r2, r0, #1
 8004408:	4606      	mov	r6, r0
 800440a:	d1d6      	bne.n	80043ba <_svfiprintf_r+0x176>
 800440c:	89ab      	ldrh	r3, [r5, #12]
 800440e:	065b      	lsls	r3, r3, #25
 8004410:	f53f af2c 	bmi.w	800426c <_svfiprintf_r+0x28>
 8004414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004416:	b01d      	add	sp, #116	; 0x74
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	ab03      	add	r3, sp, #12
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	462a      	mov	r2, r5
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <_svfiprintf_r+0x1f8>)
 8004424:	a904      	add	r1, sp, #16
 8004426:	4638      	mov	r0, r7
 8004428:	f000 f87a 	bl	8004520 <_printf_i>
 800442c:	e7eb      	b.n	8004406 <_svfiprintf_r+0x1c2>
 800442e:	bf00      	nop
 8004430:	080049f4 	.word	0x080049f4
 8004434:	080049fe 	.word	0x080049fe
 8004438:	00000000 	.word	0x00000000
 800443c:	0800418d 	.word	0x0800418d
 8004440:	080049fa 	.word	0x080049fa

08004444 <_printf_common>:
 8004444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	4616      	mov	r6, r2
 800444a:	4699      	mov	r9, r3
 800444c:	688a      	ldr	r2, [r1, #8]
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004454:	4293      	cmp	r3, r2
 8004456:	bfb8      	it	lt
 8004458:	4613      	movlt	r3, r2
 800445a:	6033      	str	r3, [r6, #0]
 800445c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004460:	4607      	mov	r7, r0
 8004462:	460c      	mov	r4, r1
 8004464:	b10a      	cbz	r2, 800446a <_printf_common+0x26>
 8004466:	3301      	adds	r3, #1
 8004468:	6033      	str	r3, [r6, #0]
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	0699      	lsls	r1, r3, #26
 800446e:	bf42      	ittt	mi
 8004470:	6833      	ldrmi	r3, [r6, #0]
 8004472:	3302      	addmi	r3, #2
 8004474:	6033      	strmi	r3, [r6, #0]
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	f015 0506 	ands.w	r5, r5, #6
 800447c:	d106      	bne.n	800448c <_printf_common+0x48>
 800447e:	f104 0a19 	add.w	sl, r4, #25
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	6832      	ldr	r2, [r6, #0]
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	42ab      	cmp	r3, r5
 800448a:	dc26      	bgt.n	80044da <_printf_common+0x96>
 800448c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004490:	1e13      	subs	r3, r2, #0
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	2301      	movne	r3, #1
 8004498:	0692      	lsls	r2, r2, #26
 800449a:	d42b      	bmi.n	80044f4 <_printf_common+0xb0>
 800449c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044a0:	4649      	mov	r1, r9
 80044a2:	4638      	mov	r0, r7
 80044a4:	47c0      	blx	r8
 80044a6:	3001      	adds	r0, #1
 80044a8:	d01e      	beq.n	80044e8 <_printf_common+0xa4>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	68e5      	ldr	r5, [r4, #12]
 80044ae:	6832      	ldr	r2, [r6, #0]
 80044b0:	f003 0306 	and.w	r3, r3, #6
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	bf08      	it	eq
 80044b8:	1aad      	subeq	r5, r5, r2
 80044ba:	68a3      	ldr	r3, [r4, #8]
 80044bc:	6922      	ldr	r2, [r4, #16]
 80044be:	bf0c      	ite	eq
 80044c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c4:	2500      	movne	r5, #0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	bfc4      	itt	gt
 80044ca:	1a9b      	subgt	r3, r3, r2
 80044cc:	18ed      	addgt	r5, r5, r3
 80044ce:	2600      	movs	r6, #0
 80044d0:	341a      	adds	r4, #26
 80044d2:	42b5      	cmp	r5, r6
 80044d4:	d11a      	bne.n	800450c <_printf_common+0xc8>
 80044d6:	2000      	movs	r0, #0
 80044d8:	e008      	b.n	80044ec <_printf_common+0xa8>
 80044da:	2301      	movs	r3, #1
 80044dc:	4652      	mov	r2, sl
 80044de:	4649      	mov	r1, r9
 80044e0:	4638      	mov	r0, r7
 80044e2:	47c0      	blx	r8
 80044e4:	3001      	adds	r0, #1
 80044e6:	d103      	bne.n	80044f0 <_printf_common+0xac>
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f0:	3501      	adds	r5, #1
 80044f2:	e7c6      	b.n	8004482 <_printf_common+0x3e>
 80044f4:	18e1      	adds	r1, r4, r3
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	2030      	movs	r0, #48	; 0x30
 80044fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044fe:	4422      	add	r2, r4
 8004500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004508:	3302      	adds	r3, #2
 800450a:	e7c7      	b.n	800449c <_printf_common+0x58>
 800450c:	2301      	movs	r3, #1
 800450e:	4622      	mov	r2, r4
 8004510:	4649      	mov	r1, r9
 8004512:	4638      	mov	r0, r7
 8004514:	47c0      	blx	r8
 8004516:	3001      	adds	r0, #1
 8004518:	d0e6      	beq.n	80044e8 <_printf_common+0xa4>
 800451a:	3601      	adds	r6, #1
 800451c:	e7d9      	b.n	80044d2 <_printf_common+0x8e>
	...

08004520 <_printf_i>:
 8004520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	460c      	mov	r4, r1
 8004526:	4691      	mov	r9, r2
 8004528:	7e27      	ldrb	r7, [r4, #24]
 800452a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800452c:	2f78      	cmp	r7, #120	; 0x78
 800452e:	4680      	mov	r8, r0
 8004530:	469a      	mov	sl, r3
 8004532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004536:	d807      	bhi.n	8004548 <_printf_i+0x28>
 8004538:	2f62      	cmp	r7, #98	; 0x62
 800453a:	d80a      	bhi.n	8004552 <_printf_i+0x32>
 800453c:	2f00      	cmp	r7, #0
 800453e:	f000 80d8 	beq.w	80046f2 <_printf_i+0x1d2>
 8004542:	2f58      	cmp	r7, #88	; 0x58
 8004544:	f000 80a3 	beq.w	800468e <_printf_i+0x16e>
 8004548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800454c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004550:	e03a      	b.n	80045c8 <_printf_i+0xa8>
 8004552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004556:	2b15      	cmp	r3, #21
 8004558:	d8f6      	bhi.n	8004548 <_printf_i+0x28>
 800455a:	a001      	add	r0, pc, #4	; (adr r0, 8004560 <_printf_i+0x40>)
 800455c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004560:	080045b9 	.word	0x080045b9
 8004564:	080045cd 	.word	0x080045cd
 8004568:	08004549 	.word	0x08004549
 800456c:	08004549 	.word	0x08004549
 8004570:	08004549 	.word	0x08004549
 8004574:	08004549 	.word	0x08004549
 8004578:	080045cd 	.word	0x080045cd
 800457c:	08004549 	.word	0x08004549
 8004580:	08004549 	.word	0x08004549
 8004584:	08004549 	.word	0x08004549
 8004588:	08004549 	.word	0x08004549
 800458c:	080046d9 	.word	0x080046d9
 8004590:	080045fd 	.word	0x080045fd
 8004594:	080046bb 	.word	0x080046bb
 8004598:	08004549 	.word	0x08004549
 800459c:	08004549 	.word	0x08004549
 80045a0:	080046fb 	.word	0x080046fb
 80045a4:	08004549 	.word	0x08004549
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004549 	.word	0x08004549
 80045b0:	08004549 	.word	0x08004549
 80045b4:	080046c3 	.word	0x080046c3
 80045b8:	680b      	ldr	r3, [r1, #0]
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	600a      	str	r2, [r1, #0]
 80045c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0a3      	b.n	8004714 <_printf_i+0x1f4>
 80045cc:	6825      	ldr	r5, [r4, #0]
 80045ce:	6808      	ldr	r0, [r1, #0]
 80045d0:	062e      	lsls	r6, r5, #24
 80045d2:	f100 0304 	add.w	r3, r0, #4
 80045d6:	d50a      	bpl.n	80045ee <_printf_i+0xce>
 80045d8:	6805      	ldr	r5, [r0, #0]
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	2d00      	cmp	r5, #0
 80045de:	da03      	bge.n	80045e8 <_printf_i+0xc8>
 80045e0:	232d      	movs	r3, #45	; 0x2d
 80045e2:	426d      	negs	r5, r5
 80045e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e8:	485e      	ldr	r0, [pc, #376]	; (8004764 <_printf_i+0x244>)
 80045ea:	230a      	movs	r3, #10
 80045ec:	e019      	b.n	8004622 <_printf_i+0x102>
 80045ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045f2:	6805      	ldr	r5, [r0, #0]
 80045f4:	600b      	str	r3, [r1, #0]
 80045f6:	bf18      	it	ne
 80045f8:	b22d      	sxthne	r5, r5
 80045fa:	e7ef      	b.n	80045dc <_printf_i+0xbc>
 80045fc:	680b      	ldr	r3, [r1, #0]
 80045fe:	6825      	ldr	r5, [r4, #0]
 8004600:	1d18      	adds	r0, r3, #4
 8004602:	6008      	str	r0, [r1, #0]
 8004604:	0628      	lsls	r0, r5, #24
 8004606:	d501      	bpl.n	800460c <_printf_i+0xec>
 8004608:	681d      	ldr	r5, [r3, #0]
 800460a:	e002      	b.n	8004612 <_printf_i+0xf2>
 800460c:	0669      	lsls	r1, r5, #25
 800460e:	d5fb      	bpl.n	8004608 <_printf_i+0xe8>
 8004610:	881d      	ldrh	r5, [r3, #0]
 8004612:	4854      	ldr	r0, [pc, #336]	; (8004764 <_printf_i+0x244>)
 8004614:	2f6f      	cmp	r7, #111	; 0x6f
 8004616:	bf0c      	ite	eq
 8004618:	2308      	moveq	r3, #8
 800461a:	230a      	movne	r3, #10
 800461c:	2100      	movs	r1, #0
 800461e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004622:	6866      	ldr	r6, [r4, #4]
 8004624:	60a6      	str	r6, [r4, #8]
 8004626:	2e00      	cmp	r6, #0
 8004628:	bfa2      	ittt	ge
 800462a:	6821      	ldrge	r1, [r4, #0]
 800462c:	f021 0104 	bicge.w	r1, r1, #4
 8004630:	6021      	strge	r1, [r4, #0]
 8004632:	b90d      	cbnz	r5, 8004638 <_printf_i+0x118>
 8004634:	2e00      	cmp	r6, #0
 8004636:	d04d      	beq.n	80046d4 <_printf_i+0x1b4>
 8004638:	4616      	mov	r6, r2
 800463a:	fbb5 f1f3 	udiv	r1, r5, r3
 800463e:	fb03 5711 	mls	r7, r3, r1, r5
 8004642:	5dc7      	ldrb	r7, [r0, r7]
 8004644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004648:	462f      	mov	r7, r5
 800464a:	42bb      	cmp	r3, r7
 800464c:	460d      	mov	r5, r1
 800464e:	d9f4      	bls.n	800463a <_printf_i+0x11a>
 8004650:	2b08      	cmp	r3, #8
 8004652:	d10b      	bne.n	800466c <_printf_i+0x14c>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07df      	lsls	r7, r3, #31
 8004658:	d508      	bpl.n	800466c <_printf_i+0x14c>
 800465a:	6923      	ldr	r3, [r4, #16]
 800465c:	6861      	ldr	r1, [r4, #4]
 800465e:	4299      	cmp	r1, r3
 8004660:	bfde      	ittt	le
 8004662:	2330      	movle	r3, #48	; 0x30
 8004664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004668:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800466c:	1b92      	subs	r2, r2, r6
 800466e:	6122      	str	r2, [r4, #16]
 8004670:	f8cd a000 	str.w	sl, [sp]
 8004674:	464b      	mov	r3, r9
 8004676:	aa03      	add	r2, sp, #12
 8004678:	4621      	mov	r1, r4
 800467a:	4640      	mov	r0, r8
 800467c:	f7ff fee2 	bl	8004444 <_printf_common>
 8004680:	3001      	adds	r0, #1
 8004682:	d14c      	bne.n	800471e <_printf_i+0x1fe>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004688:	b004      	add	sp, #16
 800468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468e:	4835      	ldr	r0, [pc, #212]	; (8004764 <_printf_i+0x244>)
 8004690:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	680e      	ldr	r6, [r1, #0]
 8004698:	061f      	lsls	r7, r3, #24
 800469a:	f856 5b04 	ldr.w	r5, [r6], #4
 800469e:	600e      	str	r6, [r1, #0]
 80046a0:	d514      	bpl.n	80046cc <_printf_i+0x1ac>
 80046a2:	07d9      	lsls	r1, r3, #31
 80046a4:	bf44      	itt	mi
 80046a6:	f043 0320 	orrmi.w	r3, r3, #32
 80046aa:	6023      	strmi	r3, [r4, #0]
 80046ac:	b91d      	cbnz	r5, 80046b6 <_printf_i+0x196>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	f023 0320 	bic.w	r3, r3, #32
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	2310      	movs	r3, #16
 80046b8:	e7b0      	b.n	800461c <_printf_i+0xfc>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f043 0320 	orr.w	r3, r3, #32
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	2378      	movs	r3, #120	; 0x78
 80046c4:	4828      	ldr	r0, [pc, #160]	; (8004768 <_printf_i+0x248>)
 80046c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046ca:	e7e3      	b.n	8004694 <_printf_i+0x174>
 80046cc:	065e      	lsls	r6, r3, #25
 80046ce:	bf48      	it	mi
 80046d0:	b2ad      	uxthmi	r5, r5
 80046d2:	e7e6      	b.n	80046a2 <_printf_i+0x182>
 80046d4:	4616      	mov	r6, r2
 80046d6:	e7bb      	b.n	8004650 <_printf_i+0x130>
 80046d8:	680b      	ldr	r3, [r1, #0]
 80046da:	6826      	ldr	r6, [r4, #0]
 80046dc:	6960      	ldr	r0, [r4, #20]
 80046de:	1d1d      	adds	r5, r3, #4
 80046e0:	600d      	str	r5, [r1, #0]
 80046e2:	0635      	lsls	r5, r6, #24
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	d501      	bpl.n	80046ec <_printf_i+0x1cc>
 80046e8:	6018      	str	r0, [r3, #0]
 80046ea:	e002      	b.n	80046f2 <_printf_i+0x1d2>
 80046ec:	0671      	lsls	r1, r6, #25
 80046ee:	d5fb      	bpl.n	80046e8 <_printf_i+0x1c8>
 80046f0:	8018      	strh	r0, [r3, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	4616      	mov	r6, r2
 80046f8:	e7ba      	b.n	8004670 <_printf_i+0x150>
 80046fa:	680b      	ldr	r3, [r1, #0]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	600a      	str	r2, [r1, #0]
 8004700:	681e      	ldr	r6, [r3, #0]
 8004702:	6862      	ldr	r2, [r4, #4]
 8004704:	2100      	movs	r1, #0
 8004706:	4630      	mov	r0, r6
 8004708:	f7fb fd9a 	bl	8000240 <memchr>
 800470c:	b108      	cbz	r0, 8004712 <_printf_i+0x1f2>
 800470e:	1b80      	subs	r0, r0, r6
 8004710:	6060      	str	r0, [r4, #4]
 8004712:	6863      	ldr	r3, [r4, #4]
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	2300      	movs	r3, #0
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471c:	e7a8      	b.n	8004670 <_printf_i+0x150>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	4632      	mov	r2, r6
 8004722:	4649      	mov	r1, r9
 8004724:	4640      	mov	r0, r8
 8004726:	47d0      	blx	sl
 8004728:	3001      	adds	r0, #1
 800472a:	d0ab      	beq.n	8004684 <_printf_i+0x164>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	079b      	lsls	r3, r3, #30
 8004730:	d413      	bmi.n	800475a <_printf_i+0x23a>
 8004732:	68e0      	ldr	r0, [r4, #12]
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	4298      	cmp	r0, r3
 8004738:	bfb8      	it	lt
 800473a:	4618      	movlt	r0, r3
 800473c:	e7a4      	b.n	8004688 <_printf_i+0x168>
 800473e:	2301      	movs	r3, #1
 8004740:	4632      	mov	r2, r6
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	47d0      	blx	sl
 8004748:	3001      	adds	r0, #1
 800474a:	d09b      	beq.n	8004684 <_printf_i+0x164>
 800474c:	3501      	adds	r5, #1
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	9903      	ldr	r1, [sp, #12]
 8004752:	1a5b      	subs	r3, r3, r1
 8004754:	42ab      	cmp	r3, r5
 8004756:	dcf2      	bgt.n	800473e <_printf_i+0x21e>
 8004758:	e7eb      	b.n	8004732 <_printf_i+0x212>
 800475a:	2500      	movs	r5, #0
 800475c:	f104 0619 	add.w	r6, r4, #25
 8004760:	e7f5      	b.n	800474e <_printf_i+0x22e>
 8004762:	bf00      	nop
 8004764:	08004a05 	.word	0x08004a05
 8004768:	08004a16 	.word	0x08004a16

0800476c <memcpy>:
 800476c:	440a      	add	r2, r1
 800476e:	4291      	cmp	r1, r2
 8004770:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004774:	d100      	bne.n	8004778 <memcpy+0xc>
 8004776:	4770      	bx	lr
 8004778:	b510      	push	{r4, lr}
 800477a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004782:	4291      	cmp	r1, r2
 8004784:	d1f9      	bne.n	800477a <memcpy+0xe>
 8004786:	bd10      	pop	{r4, pc}

08004788 <memmove>:
 8004788:	4288      	cmp	r0, r1
 800478a:	b510      	push	{r4, lr}
 800478c:	eb01 0402 	add.w	r4, r1, r2
 8004790:	d902      	bls.n	8004798 <memmove+0x10>
 8004792:	4284      	cmp	r4, r0
 8004794:	4623      	mov	r3, r4
 8004796:	d807      	bhi.n	80047a8 <memmove+0x20>
 8004798:	1e43      	subs	r3, r0, #1
 800479a:	42a1      	cmp	r1, r4
 800479c:	d008      	beq.n	80047b0 <memmove+0x28>
 800479e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047a6:	e7f8      	b.n	800479a <memmove+0x12>
 80047a8:	4402      	add	r2, r0
 80047aa:	4601      	mov	r1, r0
 80047ac:	428a      	cmp	r2, r1
 80047ae:	d100      	bne.n	80047b2 <memmove+0x2a>
 80047b0:	bd10      	pop	{r4, pc}
 80047b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ba:	e7f7      	b.n	80047ac <memmove+0x24>

080047bc <_free_r>:
 80047bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047be:	2900      	cmp	r1, #0
 80047c0:	d048      	beq.n	8004854 <_free_r+0x98>
 80047c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c6:	9001      	str	r0, [sp, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f1a1 0404 	sub.w	r4, r1, #4
 80047ce:	bfb8      	it	lt
 80047d0:	18e4      	addlt	r4, r4, r3
 80047d2:	f000 f8d3 	bl	800497c <__malloc_lock>
 80047d6:	4a20      	ldr	r2, [pc, #128]	; (8004858 <_free_r+0x9c>)
 80047d8:	9801      	ldr	r0, [sp, #4]
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	4615      	mov	r5, r2
 80047de:	b933      	cbnz	r3, 80047ee <_free_r+0x32>
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	6014      	str	r4, [r2, #0]
 80047e4:	b003      	add	sp, #12
 80047e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047ea:	f000 b8cd 	b.w	8004988 <__malloc_unlock>
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	d90b      	bls.n	800480a <_free_r+0x4e>
 80047f2:	6821      	ldr	r1, [r4, #0]
 80047f4:	1862      	adds	r2, r4, r1
 80047f6:	4293      	cmp	r3, r2
 80047f8:	bf04      	itt	eq
 80047fa:	681a      	ldreq	r2, [r3, #0]
 80047fc:	685b      	ldreq	r3, [r3, #4]
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	bf04      	itt	eq
 8004802:	1852      	addeq	r2, r2, r1
 8004804:	6022      	streq	r2, [r4, #0]
 8004806:	602c      	str	r4, [r5, #0]
 8004808:	e7ec      	b.n	80047e4 <_free_r+0x28>
 800480a:	461a      	mov	r2, r3
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b10b      	cbz	r3, 8004814 <_free_r+0x58>
 8004810:	42a3      	cmp	r3, r4
 8004812:	d9fa      	bls.n	800480a <_free_r+0x4e>
 8004814:	6811      	ldr	r1, [r2, #0]
 8004816:	1855      	adds	r5, r2, r1
 8004818:	42a5      	cmp	r5, r4
 800481a:	d10b      	bne.n	8004834 <_free_r+0x78>
 800481c:	6824      	ldr	r4, [r4, #0]
 800481e:	4421      	add	r1, r4
 8004820:	1854      	adds	r4, r2, r1
 8004822:	42a3      	cmp	r3, r4
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	d1dd      	bne.n	80047e4 <_free_r+0x28>
 8004828:	681c      	ldr	r4, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	6053      	str	r3, [r2, #4]
 800482e:	4421      	add	r1, r4
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	e7d7      	b.n	80047e4 <_free_r+0x28>
 8004834:	d902      	bls.n	800483c <_free_r+0x80>
 8004836:	230c      	movs	r3, #12
 8004838:	6003      	str	r3, [r0, #0]
 800483a:	e7d3      	b.n	80047e4 <_free_r+0x28>
 800483c:	6825      	ldr	r5, [r4, #0]
 800483e:	1961      	adds	r1, r4, r5
 8004840:	428b      	cmp	r3, r1
 8004842:	bf04      	itt	eq
 8004844:	6819      	ldreq	r1, [r3, #0]
 8004846:	685b      	ldreq	r3, [r3, #4]
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	bf04      	itt	eq
 800484c:	1949      	addeq	r1, r1, r5
 800484e:	6021      	streq	r1, [r4, #0]
 8004850:	6054      	str	r4, [r2, #4]
 8004852:	e7c7      	b.n	80047e4 <_free_r+0x28>
 8004854:	b003      	add	sp, #12
 8004856:	bd30      	pop	{r4, r5, pc}
 8004858:	20000090 	.word	0x20000090

0800485c <_malloc_r>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	1ccd      	adds	r5, r1, #3
 8004860:	f025 0503 	bic.w	r5, r5, #3
 8004864:	3508      	adds	r5, #8
 8004866:	2d0c      	cmp	r5, #12
 8004868:	bf38      	it	cc
 800486a:	250c      	movcc	r5, #12
 800486c:	2d00      	cmp	r5, #0
 800486e:	4606      	mov	r6, r0
 8004870:	db01      	blt.n	8004876 <_malloc_r+0x1a>
 8004872:	42a9      	cmp	r1, r5
 8004874:	d903      	bls.n	800487e <_malloc_r+0x22>
 8004876:	230c      	movs	r3, #12
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	2000      	movs	r0, #0
 800487c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487e:	f000 f87d 	bl	800497c <__malloc_lock>
 8004882:	4921      	ldr	r1, [pc, #132]	; (8004908 <_malloc_r+0xac>)
 8004884:	680a      	ldr	r2, [r1, #0]
 8004886:	4614      	mov	r4, r2
 8004888:	b99c      	cbnz	r4, 80048b2 <_malloc_r+0x56>
 800488a:	4f20      	ldr	r7, [pc, #128]	; (800490c <_malloc_r+0xb0>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b923      	cbnz	r3, 800489a <_malloc_r+0x3e>
 8004890:	4621      	mov	r1, r4
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f862 	bl	800495c <_sbrk_r>
 8004898:	6038      	str	r0, [r7, #0]
 800489a:	4629      	mov	r1, r5
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f85d 	bl	800495c <_sbrk_r>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d123      	bne.n	80048ee <_malloc_r+0x92>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 f86c 	bl	8004988 <__malloc_unlock>
 80048b0:	e7e3      	b.n	800487a <_malloc_r+0x1e>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1b5b      	subs	r3, r3, r5
 80048b6:	d417      	bmi.n	80048e8 <_malloc_r+0x8c>
 80048b8:	2b0b      	cmp	r3, #11
 80048ba:	d903      	bls.n	80048c4 <_malloc_r+0x68>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	441c      	add	r4, r3
 80048c0:	6025      	str	r5, [r4, #0]
 80048c2:	e004      	b.n	80048ce <_malloc_r+0x72>
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	42a2      	cmp	r2, r4
 80048c8:	bf0c      	ite	eq
 80048ca:	600b      	streq	r3, [r1, #0]
 80048cc:	6053      	strne	r3, [r2, #4]
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 f85a 	bl	8004988 <__malloc_unlock>
 80048d4:	f104 000b 	add.w	r0, r4, #11
 80048d8:	1d23      	adds	r3, r4, #4
 80048da:	f020 0007 	bic.w	r0, r0, #7
 80048de:	1ac2      	subs	r2, r0, r3
 80048e0:	d0cc      	beq.n	800487c <_malloc_r+0x20>
 80048e2:	1a1b      	subs	r3, r3, r0
 80048e4:	50a3      	str	r3, [r4, r2]
 80048e6:	e7c9      	b.n	800487c <_malloc_r+0x20>
 80048e8:	4622      	mov	r2, r4
 80048ea:	6864      	ldr	r4, [r4, #4]
 80048ec:	e7cc      	b.n	8004888 <_malloc_r+0x2c>
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d0e3      	beq.n	80048c0 <_malloc_r+0x64>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4630      	mov	r0, r6
 80048fc:	f000 f82e 	bl	800495c <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1dd      	bne.n	80048c0 <_malloc_r+0x64>
 8004904:	e7cf      	b.n	80048a6 <_malloc_r+0x4a>
 8004906:	bf00      	nop
 8004908:	20000090 	.word	0x20000090
 800490c:	20000094 	.word	0x20000094

08004910 <_realloc_r>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	4607      	mov	r7, r0
 8004914:	4614      	mov	r4, r2
 8004916:	460e      	mov	r6, r1
 8004918:	b921      	cbnz	r1, 8004924 <_realloc_r+0x14>
 800491a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800491e:	4611      	mov	r1, r2
 8004920:	f7ff bf9c 	b.w	800485c <_malloc_r>
 8004924:	b922      	cbnz	r2, 8004930 <_realloc_r+0x20>
 8004926:	f7ff ff49 	bl	80047bc <_free_r>
 800492a:	4625      	mov	r5, r4
 800492c:	4628      	mov	r0, r5
 800492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004930:	f000 f830 	bl	8004994 <_malloc_usable_size_r>
 8004934:	42a0      	cmp	r0, r4
 8004936:	d20f      	bcs.n	8004958 <_realloc_r+0x48>
 8004938:	4621      	mov	r1, r4
 800493a:	4638      	mov	r0, r7
 800493c:	f7ff ff8e 	bl	800485c <_malloc_r>
 8004940:	4605      	mov	r5, r0
 8004942:	2800      	cmp	r0, #0
 8004944:	d0f2      	beq.n	800492c <_realloc_r+0x1c>
 8004946:	4631      	mov	r1, r6
 8004948:	4622      	mov	r2, r4
 800494a:	f7ff ff0f 	bl	800476c <memcpy>
 800494e:	4631      	mov	r1, r6
 8004950:	4638      	mov	r0, r7
 8004952:	f7ff ff33 	bl	80047bc <_free_r>
 8004956:	e7e9      	b.n	800492c <_realloc_r+0x1c>
 8004958:	4635      	mov	r5, r6
 800495a:	e7e7      	b.n	800492c <_realloc_r+0x1c>

0800495c <_sbrk_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d06      	ldr	r5, [pc, #24]	; (8004978 <_sbrk_r+0x1c>)
 8004960:	2300      	movs	r3, #0
 8004962:	4604      	mov	r4, r0
 8004964:	4608      	mov	r0, r1
 8004966:	602b      	str	r3, [r5, #0]
 8004968:	f7fc f9c4 	bl	8000cf4 <_sbrk>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_sbrk_r+0x1a>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_sbrk_r+0x1a>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	2000056c 	.word	0x2000056c

0800497c <__malloc_lock>:
 800497c:	4801      	ldr	r0, [pc, #4]	; (8004984 <__malloc_lock+0x8>)
 800497e:	f000 b811 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 8004982:	bf00      	nop
 8004984:	20000574 	.word	0x20000574

08004988 <__malloc_unlock>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__malloc_unlock+0x8>)
 800498a:	f000 b80c 	b.w	80049a6 <__retarget_lock_release_recursive>
 800498e:	bf00      	nop
 8004990:	20000574 	.word	0x20000574

08004994 <_malloc_usable_size_r>:
 8004994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004998:	1f18      	subs	r0, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfbc      	itt	lt
 800499e:	580b      	ldrlt	r3, [r1, r0]
 80049a0:	18c0      	addlt	r0, r0, r3
 80049a2:	4770      	bx	lr

080049a4 <__retarget_lock_acquire_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_release_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <_init>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	bf00      	nop
 80049ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ae:	bc08      	pop	{r3}
 80049b0:	469e      	mov	lr, r3
 80049b2:	4770      	bx	lr

080049b4 <_fini>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr
